/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FrameUI;

import java.util.List;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.TextStyle;
import java.util.Locale;

/**
 *
 * @author amiru
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    private String bizzname = "";
    private int years = 0;
    private String ownername = "";
    private String icnumber = "";
    private String phoneno = "";
    private String email = "";
    private String bizzaddress = "";
    private String bizzcategory = "";
    private String bentukperniagaan = "";
    private String cawangan = "";
    private String ssm = "";
    private File folder;
    private String expirydate = "";
    private String entrymonth = "";

    public Home() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        openfolderbtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        robdisplaybtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Business Reader For A Plus Bizz - Amirul Asri");

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Home - Folder selector");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("1. Choose your folder");

        openfolderbtn.setText("Open Folder");
        openfolderbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openfolderbtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("2. Display data");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Easy to use! Just three steps");

        robdisplaybtn.setText("New R.O.B / Ammendment");
        robdisplaybtn.setEnabled(false);
        robdisplaybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robdisplaybtnActionPerformed(evt);
            }
        });

        resetbtn.setText("Reset");
        resetbtn.setEnabled(false);
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(37, 37, 37)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(openfolderbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(robdisplaybtn, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(240, 240, 240)
                                .addComponent(jLabel4)))
                        .addGap(0, 219, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(resetbtn)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(openfolderbtn))
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(robdisplaybtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addComponent(resetbtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String valueFinder(String keyword, File docs, boolean doubledot) throws IOException {
        PDDocument document = PDDocument.load(docs);
        PDFTextStripper stripper = new PDFTextStripper();
        String text = stripper.getText(document);
        String regex = "";
        String escapedKeyword = Pattern.quote(keyword);
        if (doubledot == true) {
            regex = "(?m)^" + escapedKeyword + "\\s*:(.*)$";
        } else {
            regex = "(?m)^" + escapedKeyword + "\\s*(.*)$";
        }
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(text);

        String value = "";
        if (matcher.find()) {
            value = matcher.group(1).trim();
        }
        document.close();
        return value;
    }

    private String valueFinderDesc(String startkeyword, String endKeyword, File docs) throws IOException {
        String desc = "";
        if (docs.isFile()) {
            PDDocument document = PDDocument.load(docs);

            // Initialize the PDFTextStripper
            PDFTextStripper stripper = new PDFTextStripper();

            // Extract the entire text from the PDF
            String text = stripper.getText(document);

            // Find the index of the start and end keywords
            int startIndex = text.indexOf(startkeyword);
            int endIndex = text.indexOf(endKeyword);

            if (startIndex != -1 && endIndex != -1) {
                // Capture the description between the keywords
                desc = text.substring(startIndex + startkeyword.length(), endIndex).trim();
            }
            document.close();
        }
        return desc;
    }

    private void readPDF(File folder) {
        try {
            this.folder = folder;

            if (folder.exists() && folder.isDirectory()) {
                // Get all the files in the folder
                File[] files = folder.listFiles();
                String[] matchWords = {"BIS_INFO", "BORANG_A", "CERT"};

                // Check if any files are found in the folder
                if (files != null && files.length > 0) {
                    // Create a list to store the matched files
                    List<File> matchedFiles = new ArrayList<>();

                    for (File file : files) {
                        String fileName = file.getName();
                        for (String matchWord : matchWords) {
                            // Use regular expression to match the file names with the match words
                            if (fileName.matches(".*" + matchWord + ".*")) {
                                matchedFiles.add(file);
                            }
                        }
                    }

//                        // Print the matched files
//                        if (!matchedFiles.isEmpty()) {
//                            System.out.println("Matched files:");
//                            for (File file : matchedFiles) {
//                                System.out.println(file.getName());
//                            }
//                        } else {
//                            System.out.println("No files found with the specified match words in the folder.");
//                        }
                    File bisInfoFile = null;
                    File borangAFile = null;
                    File certFile = null;

                    for (File file : matchedFiles) {
                        String fileName = file.getName();
                        if (fileName.contains("BIS_INFO")) {
                            bisInfoFile = file;
                        } else if (fileName.contains("BORANG_A")) {
                            borangAFile = file;
                        } else if (fileName.contains("CERT")) {
                            certFile = file;
                        }
                    }

                    // Now you can use bisInfoFile, borangAFile, and certFile as needed
                    if (bisInfoFile != null) {
                        //System.out.println("BIS_INFO File: " + bisInfoFile.getName());
                        String namaperniagaan = valueFinder("NAMA PERNIAGAAN", bisInfoFile, true);
                        String nopendaftaran = valueFinder("NO PENDAFTARAN", bisInfoFile, true);
                        String bentukperniagaan = valueFinder("BENTUK PERNIAGAAN", bisInfoFile, true);
                        String fullname = valueFinder("NAMA", bisInfoFile, true);
                        String nokp = valueFinder("NO K/P (BARU)", bisInfoFile, true);
                        String alamat = valueFinderDesc("ALAMAT UTAMA PERNIAGAAN : ", "BENTUK PERNIAGAAN", bisInfoFile);
                        String tarikhpendaftaran = valueFinder("TARIKH MULA BERNIAGA ", bisInfoFile, true);
                        String tarikhluputpendaftaran = valueFinder("TARIKH LUPUT  PENDAFTARAN", bisInfoFile, true);
                        String descbizz = valueFinderDesc("** JENIS PERNIAGAAN **", "** MAKLUMAT CAWANGAN **", bisInfoFile);
                        String cawangan = valueFinderDesc("** MAKLUMAT CAWANGAN **", "UserID", bisInfoFile);

                        if ((tarikhpendaftaran != null && !tarikhpendaftaran.trim().isEmpty()) && (tarikhluputpendaftaran != null && !tarikhluputpendaftaran.trim().isEmpty())) {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

                            Date date1 = dateFormat.parse(tarikhpendaftaran);
                            Date date2 = dateFormat.parse(tarikhluputpendaftaran);

                            int year1 = Integer.parseInt(dateFormat.format(date1).split("-")[2]);
                            int year2 = Integer.parseInt(dateFormat.format(date2).split("-")[2]);

                            int yearDiff = Math.abs(year2 - year1);
                            this.years = yearDiff;
                        }
//                            System.out.println("GET VALUE FULLNAME: " + fullname);
//                            System.out.println("GET VALUE KP: " + nokp);
//                            System.out.println("GET VALUE PENDAFTARAN: " + nopendaftaran);
//                            System.out.println("GET VALUE NAMA PERNIAGAAN: " + namaperniagaan);
//                            System.out.println("ALAMAT 1: " + alamat1);

                        // Create a Pattern object
                        Pattern pattern = Pattern.compile("\\((.*?)\\)");

                        // Create a Matcher object
                        Matcher matcher = pattern.matcher(nopendaftaran);

                        // Find and print the text within brackets
                        while (matcher.find()) {
                            String extractedText = matcher.group(1);
                            this.ssm = extractedText;
                        }

                        this.bizzname = namaperniagaan;
                        this.ownername = fullname;
                        this.icnumber = nokp;
                        this.bizzaddress = alamat;
                        this.bizzcategory = descbizz;
                        this.bentukperniagaan = bentukperniagaan;
                        this.cawangan = cawangan;
                        this.expirydate = tarikhluputpendaftaran;

                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                        LocalDate date = LocalDate.parse(tarikhpendaftaran, formatter);

                        String monthName = date.getMonth().getDisplayName(TextStyle.FULL, Locale.getDefault());
                        int year = date.getYear();

                        this.entrymonth = monthName + " " + year;

                    }
                    if (borangAFile != null) {
                        String email = valueFinder("* E-MAIL ", borangAFile, false);
                        String phoneno = valueFinder("* TELEPHONE ", borangAFile, false);
//                            System.out.println("GET VALUE EMAIL: " + email);
                        this.email = email;
                        this.phoneno = phoneno;

                    }
                    robdisplaybtn.setEnabled(true);
                    resetbtn.setEnabled(true);

                } else {
                    JOptionPane.showMessageDialog(null, "No file found in this folder", "Folder selection", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "The specified folder does not exist or is not a directory.", "Folder selection", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occured when reading PDF files", "Error read PDF", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void importPdf(boolean reusefolder) {
        if (reusefolder != true) {
            JFrame frame = new JFrame();
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int option = fileChooser.showOpenDialog(frame);
            if (option == JFileChooser.APPROVE_OPTION) {
                File folder = fileChooser.getSelectedFile();
                readPDF(folder);
            } else {
                JOptionPane.showMessageDialog(null, "User cancelled", "Folder selection", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            readPDF(folder);
        }
    }
    private void openfolderbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openfolderbtnActionPerformed
        importPdf(false);
    }//GEN-LAST:event_openfolderbtnActionPerformed

    NewRob robui;
    private void robdisplaybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robdisplaybtnActionPerformed
        if (robui != null) {
            robui.setVisible(true);
        } else {
            robui = new NewRob(bizzname, years, ownername, icnumber, phoneno, email, bizzaddress, bizzcategory, bentukperniagaan, cawangan, ssm, expirydate, entrymonth);
        }
    }//GEN-LAST:event_robdisplaybtnActionPerformed
    public static int showConfirmationDialog(String message) {
        return JOptionPane.showConfirmDialog(null, message, "Clear files", JOptionPane.YES_NO_OPTION);
    }
    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
        robui.dispose();
        robui = null;

        int result = showConfirmationDialog("Are you want to clear all files in selected folders?\nThis action can't be undone");

        if (result == JOptionPane.YES_OPTION) {
            for (File file : this.folder.listFiles()) {
                if (!file.isDirectory()) {
                    file.delete();
                }
            }
            int result2 = showConfirmationDialog("Do you want to reuse same folder?");
            if (result2 == JOptionPane.YES_OPTION) {
                int result3 = showConfirmationDialog("Put all contents in that folder and click Yes");
                if (result3 == JOptionPane.YES_OPTION) {
                    importPdf(true);
                } else {
                    robdisplaybtn.setEnabled(false);
                    resetbtn.setEnabled(false);
                }
            } else {
                robdisplaybtn.setEnabled(false);
                resetbtn.setEnabled(false);
            }
        }
    }//GEN-LAST:event_resetbtnActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton openfolderbtn;
    private javax.swing.JButton resetbtn;
    private javax.swing.JButton robdisplaybtn;
    // End of variables declaration//GEN-END:variables

}
